apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "deephealth-backend.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "deephealth-backend.name" . }}
    helm.sh/chart: {{ include "deephealth-backend.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "deephealth-backend.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "deephealth-backend.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      initContainers:
        - name: {{ .Chart.Name }}-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash","-c","printenv && init.sh"]
          #args: [""]
          env:
            - name: DJANGO_ENV
              value: "/app/.env/config"
            - name: ADMIN_USER
              value: "{{ .Values.global.backend.admin.username }}"
            - name: ADMIN_PASSWORD
              value: "{{ .Values.global.backend.admin.password }}"
            - name: ADMIN_EMAIL
              value: "{{ .Values.global.backend.admin.email }}"
          volumeMounts:
            - name: backend-secrets
              mountPath: "/app/.env"
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash","-c"]
          args: ["python manage.py runserver 0.0.0.0:{{ .Values.global.backend.port }}"]
          # envFrom:
          #   - secretRef:
          #       name: backend-secrets
          env:
            - name: DJANGO_ENV
              value: "/app/.env/config"
          volumeMounts:
            - name: backend-secrets
              mountPath: "/app/.env"
          ports:
            - name: backend-port
              containerPort: {{ .Values.global.backend.port }}
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: backend-secrets
          secret:
            secretName: backend-secrets
            defaultMode: 0644
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
