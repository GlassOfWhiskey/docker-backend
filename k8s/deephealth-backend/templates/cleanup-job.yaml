apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "deephealth-backend.fullname" . }}-cleanup
  labels:
    app.kubernetes.io/name: {{ include "deephealth-backend.name" . }}
    helm.sh/chart: {{ include "deephealth-backend.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-delete-policy: hook-succeeded{{ if not .Values.global.debug }},hook-failed{{ end }}
spec:
  selector:
    matchLabels:
    app.kubernetes.io/name: {{ include "deephealth-backend.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
    labels:
      app.kubernetes.io/name: {{ include "deephealth-backend.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: cleanup
        image: "crs4/k8s-wait-for:latest"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        command: 
          - /bin/sh
          - -c
          - {{- if not .Values.global.retainPVCs }}
            kubectl delete job {{ .Release.Name }}-init ;
            kubectl scale deployment {{ .Release.Name }}-console --replicas=0 ;
            kubectl scale deployment {{ .Release.Name }}-nginx --replicas=0 ;
            kubectl scale deployment {{ .Release.Name }}-backend --replicas=0 ;
            kubectl scale deployment {{ .Release.Name }}-celery --replicas=0 ;
            kubectl scale statefulset {{ .Release.Name }}-postgresql --replicas=0 ;
            kubectl scale statefulset {{ .Release.Name }}-rabbitmq --replicas=0 ;
            pvcs=$(kubectl get pvc -l app.kubernetes.io/instance={{ .Release.Name }} -o jsonpath="{.items[*].metadata.name}") ;
            pvcs="$pvcs $(kubectl get pvc -l release={{ .Release.Name }} -o jsonpath="{.items[*].metadata.name}") ";
            kubectl delete pvc $pvcs ;
            {{- end }}
            {{- if not .Values.global.retainSecrets }}
            secrets=$(kubectl get secrets -l app.kubernetes.io/instance={{ .Release.Name }} -o jsonpath="{.items[*].metadata.name}") ;
            kubectl delete secret $secrets ;
            {{- end }}
            echo 'Cleanup DONE'
      restartPolicy: Never
        {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.backend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  backoffLimit: 4
