# Default values for deephealth-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# global settings
global:
  debug: &debug False
  # default pull policy for images
  imagePullPolicy: &imagePullPolicy "Always"
  # persistence class used by services


# ServiceType of the Back-end EndPoint
# endpoint:
#   service:
#     type: NodePort


# Set external access to the services
# ingress:
#   enabled: true
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: backend.172.30.10.101.nip.io
#       serviceName: endpoint # service name without ReleasePrefix
#       servicePort: 80

#   tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Backend settings
backend:
  admin:
    username: admin
    # password: admin
    # email: admin@domain.it

  replicaCount: 1

  image: &backend_image
    # repository: dhealth/backend
    tag: 0.1
    pullPolicy: Always

  # service:
  #   type: NodePort
  #   port: 80
  #   containerPort: 8000

  # Persistence settings
  # Notice that all the storage classes below
  # need to support the 'ReadWriteMany' access mode
  persistence:
    retainVolumes: false
    datasets:
      storageClass: *globalStorageClass
      path: '/data/datasets'
      size: 1Gi
      # existingClaim: datasets
    training:
      storageClass: *globalStorageClass
      path: '/data/training'
      size: 1Gi
      # existingClaim: training
    inference:
      storageClass: *globalStorageClass
      path: '/data/inference'
      size: 1Gi
      # existingClaim: inference
    staticFiles:
      storageClass: *globalStorageClass
      size: 10Mi

  workers: 3

  # Comma separated list of allowed hosts
  allowedHosts: "*"

  # Cross-Origin Resource Sharing (CORS) whitelist
  corsOriginWhiteList: ""

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # To use GPU you need to install 
    # https://github.com/NVIDIA/k8s-device-plugin) 
    # on your k8s Cluster 
    # limits:
    #   nvidia.com/gpu: 2 # requesting 2 GPUs

  nodeSelector: {}

  tolerations: []

  affinity: {}


# nginx settings
nginx:
  nameOverride: "nginx"

  image:
    pullPolicy: Always
    debug: *debug
  
  # service:
  #   type: NodePort
  #   port: 80
  #   #httpsPort: 443

  #serverBlockConfigMap: proxy-config
  # serverDataVolumeClaim: static-files
  # serverDataVolumePath: /app/static
  

  ingress:
    # enabled: false
    # hostname: nginx.backend.172.30.10.101.nip.io
    # annotations:
    #   kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # hosts:
    #   - host: 
    #       name: pippo.backend.172.30.10.101.nip.io
    #       path: /

    tls: []
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

# Celery settings
celery:

  acceptContent: 'json' # list of comma separated values
  taskSerializer: 'json'
  
  service:
    # type: ClusterIP
    # port: 80
    containerPort: 5432

  # ingress:
  #   enabled: true
  #   annotations:
  #     kubernetes.io/ingress.class: nginx
  #     # kubernetes.io/tls-acme: "true"
  #   hosts:
  #     - host: celery.backend.172.30.10.101.nip.io

  #   tls: []
  #   #  - secretName: chart-example-tls
  #   #    hosts:
  #   #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # To use GPU you need to install 
    # https://github.com/NVIDIA/k8s-device-plugin) 
    # on your k8s Cluster 
    # limits:
    #   nvidia.com/gpu: 2 # requesting 2 GPUs

  nodeSelector: {}

  tolerations: []

  affinity: {}


# RabbitMQ settings. You can find all the available settings 
# at https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq
broker: &broker
  nameOverride: "rabbitmq"

  image:
    debug: *debug
  
  rabbitmq:
    username: user
    # password: password
  
  service:
    port: 5672

  persistence:
    storageClass: *globalStorageClass
    size: 1Gi
    # existingClaim: ""
  
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Copy broker properties as values of the subchart RabbitMQ
rabbitmq: *broker


# PostgreSQL settings.
# You can find all the available settings at https://github.com/bitnami/charts/tree/master/bitnami/postgresql
postgresql:
  nameOverride: "postgresql"
  # DB
  postgresqlDatabase: db
  # credentials
  postgresqlUsername: user
  # postgresqlPassword: ""
  # postgresqlPostgresPassword: ""

  image:
    debug: *debug

  service:
    port: 5432

  persistence:
    storageClass: *globalStorageClass
    size: 1Gi
    # existingClaim: ""

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}


# Debug console settings
console:
  enabled: *debug
  image:
    repository: busybox
    tag: latest
    pullPolicy: Always
    debug: *debug

  replicaCount: 1
  
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # To use GPU you need to install 
    # https://github.com/NVIDIA/k8s-device-plugin) 
    # on your k8s Cluster 
    # limits:
    #   nvidia.com/gpu: 2 # requesting 2 GPUs

  nodeSelector: {}

  tolerations: []

  affinity: {}